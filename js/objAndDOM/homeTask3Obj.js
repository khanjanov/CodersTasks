//! 08.01.24
//TODO promise vÉ™ async await'i anlamaq ( https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/ )

// hÉ™r dÉ™fÉ™ yenidÉ™n yazmamaq vÉ™ ya kopyalamamaq Ã¼Ã§Ã¼n stocks objectini commentÉ™ alma
// commentlÉ™ri rÉ™ngli gÃ¶rmÉ™k Ã¼Ã§Ã¼n extensions hissÉ™sindÉ™n "better comments" yÃ¼klÉ™ ( yÃ¼klÉ™mÉ™misÉ™nsÉ™ )

let stocks = {
  Fruits: ["strawberry", "grapes", "banana", "apple"],
  liquid: ["water", "ice"],
  holder: ["cone", "cup", "stick"],
  toppings: ["chocolate", "peanuts"],
};
//! sÉ™tir 52yÉ™ kimi commentdÉ™n Ã§Ä±xar
/* 
// 1st Function
let order = (fruit_name, call_production) => {
  setTimeout(function () {
    console.log(`${stocks.Fruits[fruit_name]} was selected`);

    // Order placed. Call production to start
    call_production();
  }, 2000);
};

// 2nd Function
let production = () => {
  setTimeout(() => {
    console.log("production has started");
    setTimeout(() => {
      console.log("The fruit has been chopped");
      setTimeout(() => {
        console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} Added`);
        setTimeout(() => {
          console.log("start the machine");
          setTimeout(() => {
            console.log(`Ice cream placed on ${stocks.holder[1]}`);
            setTimeout(() => {
              console.log(`${stocks.toppings[0]} as toppings`);
              setTimeout(() => {
                console.log("serve Ice cream");
              }, 2000);
            }, 3000);
          }, 2000);
        }, 1000);
      }, 1000);
    }, 2000);
  }, 0);
};
// yuxarÄ±dakÄ±, dÉ™rsdÉ™ deyilÉ™n calback hell'dir, burada addÄ±m sayÄ± azdÄ±r, Walk of famedÉ™ki adlarÄ± mÃ¼É™yyÉ™n periodla yazdÄ±rdÄ±ÄŸÄ±mÄ±zÄ± dÃ¼ÅŸÃ¼n (2772)
// Trigger ðŸ‘‡
order(0, production); */

//! promise olayÄ± burdan baÅŸlayÄ±r, É™gÉ™r É™vvÉ™li baÅŸa dÃ¼ÅŸmÃ¼sÉ™nsÉ™ ( sÉ™tir 112yÉ™ qÉ™dÉ™r commentdÉ™n Ã§Ä±xar ), davam et, yoxsa yenidÉ™n oxu

/* let is_shop_open = true; // false'a dÉ™yiÅŸ deyilÉ™n hissÉ™dÉ™ false'a dÉ™yiÅŸilmÉ™li ( catch() mÉ™sÉ™lÉ™sini anlamaq Ã¼Ã§Ã¼n, indilik true qalsÄ±n )

let order = (time, work) => {
  return new Promise((resolve, reject) => {
    if (is_shop_open) {
      setTimeout(() => {
        // work is ðŸ‘‡ getting done here
        resolve(work());

        // Setting ðŸ‘‡ time here for 1 work
      }, time);
    } else {
      reject(console.log("Our shop is closed"));
    }
  });
};

// step 1
order(2000, () => console.log(`${stocks.Fruits[0]} was selected`))
  // step 2
  .then(() => {
    return order(0, () => console.log("production has started"));
  })

  // step 3
  .then(() => {
    return order(2000, () => console.log("Fruit has been chopped"));
  })

  // step 4
  .then(() => {
    return order(1000, () =>
      console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} added`)
    );
  })

  // step 5
  .then(() => {
    return order(1000, () => console.log("start the machine"));
  })

  // step 6
  .then(() => {
    return order(2000, () =>
      console.log(`ice cream placed on ${stocks.holder[1]}`)
    );
  })

  // step 7
  .then(() => {
    return order(3000, () => console.log(`${stocks.toppings[0]} as toppings`));
  })

  // Step 8
  .then(() => {
    return order(2000, () => console.log("Serve Ice Cream"));
  }); */
//! catch() vÉ™ finally() É™lavÉ™ olunacaq hissÉ™ aÅŸaÄŸÄ±da ( 114dÉ™n 121É™ kimi commentdÉ™n Ã§Ä±xar )
//* burada É™vvÉ™ldÉ™ olan ";" silinmÉ™li (É™gÉ™r copy edÉ™ndÉ™ onunla birgÉ™ kopyalamÄ±sansa), then ilÉ™ catch arasÄ±nda É™lavÉ™ heÃ§nÉ™ olmamalÄ±
/* .catch(() => {
    console.log("Customer left");
  }) 
  //* yenÉ™ eyni qaydada burada É™vvÉ™ldÉ™ olan ";" silinmÉ™li (É™gÉ™r copy edÉ™ndÉ™ onunla birgÉ™ kopyalamÄ±sansa), yenÉ™ arada É™lavÉ™ heÃ§nÉ™ olmamalÄ±
  .finally(() => {
    console.log("end of day");
  }); */

//! async await olayÄ±

//* ðŸ‘‡ the magical keyword

/* async function order() {
  // Write code here
} */

//! try catch hissÉ™sini oxu, davam et

//* aÅŸaÄŸÄ±dakÄ± sadÉ™cÉ™ async await'in sintaksisidir, commentdÉ™ qalsÄ±n ( 134 - 145 )

/* async function kitchen() {
  try {
    // Let's create a fake problem
    await abc;
  } catch (error) {
    console.log("abc does not exist", error);
  } finally {
    console.log("Runs code anyways");
  }
}

kitchen(); // run the code */

//! 149dan 173É™ qÉ™dÉ™r commentdÉ™n Ã§Ä±xar

/* function toppings_choice() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(console.log("which topping would you love?"));
    }, 3000);
  });
}
async function kitchen() {
  console.log("A");
  console.log("B");
  console.log("C");

  await toppings_choice(); //* await toppings_choice() funksiyasÄ±nÄ±n iÅŸÉ™ dÃ¼ÅŸmÉ™sini gÃ¶zlÉ™dir ( lÉ™ngidir ), console'a baxaraq anlamalÄ±

  console.log("D");
  console.log("E");
}

// Trigger the function

kitchen();
console.log("doing the dishes");
console.log("cleaning the tables");
console.log("taking orders"); */

/* let is_shop_open = false;

function time(ms) {
  return new Promise((resolve, reject) => {
    if (is_shop_open) {
      setTimeout(resolve, ms);
    } else {
      reject(console.log("Shop is closed"));
    }
  });
}
async function kitchen() {
  try {
    // time taken to perform this 1 task
    await time(2000);
    console.log(`${stocks.Fruits[0]} was selected`);
  } catch (error) { //* is_shop_open false olduqda "Customer left" vÉ™ undefined yazÄ±sÄ± gÉ™lir, heÃ§nÉ™ throw etmÉ™miÅŸik deyÉ™ olduÄŸunu dÃ¼ÅŸÃ¼nÃ¼rÉ™m (174-198 commentÉ™ al, 200-226 commentdÉ™n Ã§Ä±xar)
    console.log("Customer left", error);
  } finally {
    console.log("Day ended, shop closed");
  }
}

// Trigger
kitchen(); */

/* let is_shop_open = true;

function time(ms) {
  return new Promise((resolve, reject) => {
    if (is_shop_open) {
      setTimeout(resolve, ms);
    } else {
      reject(console.log("Shop is closed"));
    }
  });
}
async function kitchen() {
  try {
    // time taken to perform this 1 task
    await time(2000);
    let choosedFruit = "jackfruit"; //* bizim stock'da olmayan meyvÉ™ni seÃ§sin
    console.log(`${choosedFruit} was selected`);
    if(!stocks.Fruits.includes(choosedFruit)) throw "because the fruit he wants isn't available" //*stringdÉ™ yazdÄ±ÄŸÄ±mÄ±zÄ± catch(error)'dakÄ± error olaraq console'a yazdÄ±rÄ±r, yanlÄ±ÅŸ fikirdÉ™yÉ™msÉ™, mÃ¼É™llimdÉ™n izah istÉ™mÉ™li
  } catch (error) {
    console.log("Customer left", error);
  } finally {
    console.log("Day ended, shop closed");
  }
}

// Trigger
kitchen(); */

//! 200-226 commentÉ™ al, 230-272 commentdÉ™n Ã§Ä±xar, ctr s, console'u aÃ§ izlÉ™

/* let is_shop_open = true; //* true olduqda, aÅŸaÄŸÄ±dakÄ± proses davam edir vÉ™ mÃ¼ÅŸtÉ™riyÉ™ dondurma verilir, false olduqda, mÉ™ntiqÉ™n shop qapalÄ± olduÄŸu Ã¼Ã§Ã¼n mÃ¼ÅŸtÉ™ri gedir

function time(ms) {
  return new Promise((resolve, reject) => {
    if (is_shop_open) {
      setTimeout(resolve, ms);
    } else {
      reject(console.log("Shop is closed"));
    }
  });
}

async function kitchen() {
  try {
    await time(2000);
    console.log(`${stocks.Fruits[0]} was selected`);

    await time(0);
    console.log("production has started");

    await time(2000);
    console.log("fruit has been chopped");

    await time(1000);
    console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} added`);

    await time(1000);
    console.log("start the machine");

    await time(2000);
    console.log(`ice cream placed on ${stocks.holder[1]}`);

    await time(3000);
    console.log(`${stocks.toppings[0]} as toppings`);

    await time(2000);
    console.log("Serve Ice Cream");
  } catch (error) {
    console.log("customer left");
  }
}

kitchen(); */